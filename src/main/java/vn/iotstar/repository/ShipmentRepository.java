package vn.iotstar.repository;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import vn.iotstar.entity.Shipment;
import vn.iotstar.entity.Shipment.ShipmentStatus;

import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface ShipmentRepository extends JpaRepository<Shipment, String> {

    /* ===========================================================
       üîπ 1. Truy v·∫•n c∆° b·∫£n theo tr·∫°ng th√°i v√† shipper
       =========================================================== */

    // üü° Danh s√°ch t·∫•t c·∫£ shipment theo tr·∫°ng th√°i (kh√¥ng l·ªçc shipper)
    Page<Shipment> findByStatus(ShipmentStatus status, Pageable pageable);

    // üü° Shipment theo tr·∫°ng th√°i v√† kh√¥ng c√≥ shipper (ƒë∆°n ƒëang ch·ªù nh·∫≠n)
    Page<Shipment> findByStatusAndShipperIsNull(ShipmentStatus status, Pageable pageable);

    // üîµ Shipment c·ªßa 1 shipper theo tr·∫°ng th√°i
    Page<Shipment> findByShipper_IdAndStatus(String shipperId, ShipmentStatus status, Pageable pageable);

    // üîµ Shipment c·ªßa 1 shipper (d·∫°ng list, d√πng cho th·ªëng k√™ ho·∫∑c kh√¥ng ph√¢n trang)
    List<Shipment> findByShipper_IdAndStatus(String shipperId, ShipmentStatus status);


    /* ===========================================================
       üîπ 2. L·ªçc theo th·ªùi gian (T·ª´ ng√†y ‚Äì ƒê·∫øn ng√†y)
       =========================================================== */

    // üü° ƒê∆°n ch·ªù nh·∫≠n (ch∆∞a c√≥ shipper) trong kho·∫£ng th·ªùi gian
    @Query("""
            SELECT s FROM Shipment s
            WHERE s.status = :status 
            AND s.shipper IS NULL
            AND s.createdAt BETWEEN :start AND :end
            """)
    Page<Shipment> findByStatusAndShipperIsNullAndCreatedAtBetween(
            @Param("status") ShipmentStatus status,
            @Param("start") LocalDateTime start,
            @Param("end") LocalDateTime end,
            Pageable pageable);

    // üîµ ƒê∆°n c·ªßa 1 shipper trong kho·∫£ng th·ªùi gian
    @Query("""
            SELECT s FROM Shipment s
            WHERE s.shipper.id = :shipperId 
            AND s.status = :status
            AND s.createdAt BETWEEN :start AND :end
            """)
    Page<Shipment> findByShipper_IdAndStatusAndCreatedAtBetween(
            @Param("shipperId") String shipperId,
            @Param("status") ShipmentStatus status,
            @Param("start") LocalDateTime start,
            @Param("end") LocalDateTime end,
            Pageable pageable);


    /* ===========================================================
       üîπ 3. T√¨m ki·∫øm theo keyword (T√™n KH / ƒê·ªãa ch·ªâ)
       =========================================================== */

    // üü° ƒê∆°n ch·ªù nh·∫≠n (ch∆∞a c√≥ shipper) t√¨m theo keyword
    @Query("""
            SELECT s FROM Shipment s
            WHERE s.status = :status
            AND s.shipper IS NULL
            AND (
                LOWER(s.order.user.fullName) LIKE LOWER(CONCAT('%', :keyword, '%'))
                OR LOWER(s.order.address) LIKE LOWER(CONCAT('%', :keyword, '%'))
                OR LOWER(s.order.id) LIKE LOWER(CONCAT('%', :keyword, '%'))
            )
            """)
    Page<Shipment> searchByStatusAndKeywordAndShipperIsNull(
            @Param("status") ShipmentStatus status,
            @Param("keyword") String keyword,
            Pageable pageable);

    // üîµ ƒê∆°n c·ªßa 1 shipper t√¨m theo keyword
    @Query("""
            SELECT s FROM Shipment s
            WHERE s.shipper.id = :shipperId 
            AND s.status = :status
            AND (
                LOWER(s.order.user.fullName) LIKE LOWER(CONCAT('%', :keyword, '%'))
                OR LOWER(s.order.address) LIKE LOWER(CONCAT('%', :keyword, '%'))
                OR LOWER(s.order.id) LIKE LOWER(CONCAT('%', :keyword, '%'))
            )
            """)
    Page<Shipment> searchByShipperAndStatusAndKeyword(
            @Param("shipperId") String shipperId,
            @Param("status") ShipmentStatus status,
            @Param("keyword") String keyword,
            Pageable pageable);


    /* ===========================================================
       üîπ 4. C√°c h√†m c≈© (List) ‚Äî t∆∞∆°ng th√≠ch v·ªõi b·∫£n dashboard c≈©
       =========================================================== */

    List<Shipment> findByStatus(ShipmentStatus status);
    List<Shipment> findByShipper_Id(String shipperId);
    List<Shipment> findByShipper_IdAndStatusIn(String shipperId, List<ShipmentStatus> statuses);
    
    /* ===========================================================
       üîπ 5. C√°c h√†m m·ªõi cho Report v√† Profile
       =========================================================== */
    
    // L·∫•y shipments theo shipper v√† kho·∫£ng th·ªùi gian
    @Query("""
            SELECT s FROM Shipment s
            WHERE s.shipper.id = :shipperId 
            AND s.createdAt BETWEEN :start AND :end
            ORDER BY s.createdAt DESC
            """)
    List<Shipment> findByShipper_IdAndCreatedAtBetween(
            @Param("shipperId") String shipperId,
            @Param("start") LocalDateTime start,
            @Param("end") LocalDateTime end
    );
    
    // L·∫•y 10 shipments g·∫ßn nh·∫•t c·ªßa shipper (cho profile)
    @Query("""
            SELECT s FROM Shipment s
            WHERE s.shipper.id = :shipperId 
            ORDER BY s.createdAt DESC
            LIMIT 10
            """)
    List<Shipment> findTop10ByShipper_IdOrderByCreatedAtDesc(@Param("shipperId") String shipperId);
}
